// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Manga {
  id  Int @id @default(autoincrement())
  title String
  artist Artist @relation(fields: [artistId], references: [id])
  artistId Int
  group Group? @relation(fields: [groupId], references: [id])
  groupId Int?
  parody Parody? @relation(fields: [parodyId], references: [id])
  parodyId Int?
  fileLocation String
  tumbnailLocation String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  source String?
  remarks String?
  filename String
  maxPage Int
  bookmark Int
  tags Tag[]
  favorites Favorite[]
}

model Tag {
  id Int @id @default(autoincrement())
  name String
  manga Manga @relation(fields: [mangaId],references: [id])
  mangaId Int
}

model Category {
  id Int @id @default(autoincrement())
  name String
  manga Manga[]
}

model Artist {
  id Int @id @default(autoincrement())
  name String
  manga Manga[]
}

model Group {
  id Int @id @default(autoincrement())
  name String
  manga Manga[]
}

model Parody {
  id Int @id @default(autoincrement())
  name String
  manga Manga[]
}

model Favorite {
  id Int @id @default(autoincrement())
  name String
  manga Manga @relation(fields: [mangaId],references: [id])
  mangaId Int
  page Int
}